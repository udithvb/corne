/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&mt { flavor = "tap-preferred"; };

/ {
    macros {
        back_i3: back_i3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "BACK_I3";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "base";
            bindings = <
&none  &kp Q  &kp W       &kp F           &kp P               &kp B        &kp J         &lt 7 L             &kp U           &kp Y           &kp SEMICOLON  &none
&none  &kp A  &mt LGUI R  &mt LEFT_ALT S  &mt LEFT_CONTROL T  &kp G        &kp M         &mt LEFT_CONTROL N  &mt LEFT_ALT E  &mt LEFT_GUI I  &kp O          &none
&none  &kp Z  &kp X       &kp C           &mt LEFT_SHIFT D    &kp V        &kp K         &mt LEFT_SHIFT H    &kp COMMA       &kp DOT         &kp FSLH       &none
                          &lt 5 ESCAPE    &lt 2 SPACE         &lt 4 TAB    &lt 3 RETURN  &lt 1 BACKSPACE     &lt 6 DELETE
            >;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "num";
            bindings = <
&none  &kp LEFT_BRACKET  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp RIGHT_BRACKET       &none  &none  &none  &none  &none  &none
&none  &kp SQT           &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL               &none  &none  &none  &none  &none  &none
&none  &kp TILDE         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NON_US_BACKSLASH    &none  &none  &none  &none  &none  &none
                                       &none         &kp N0        &kp MINUS               &none  &none  &none
            >;
        };

        nav {
            bindings = <
&none  &none  &none  &none  &none  &none    &none     &none           &none         &none      &none  &none
&none  &none  &none  &none  &none  &none    &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none  &none
&none  &none  &none  &none  &none  &none    &kp HOME  &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &none  &none
                     &none  &none  &none    &none     &none           &none
            >;
        };

        sym {
            bindings = <
&none  &kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)     &kp LS(LPAR)   &kp LS(RBRC)      &none  &none  &none  &none  &none  &none
&none  &kp LS(DQT)    &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp PLUS          &none  &none  &none  &none  &none  &none
&none  &kp LS(TILDE)  &kp EXCL      &kp LS(AT_SIGN)  &kp LS(POUND)  &kp PIPE          &none  &none  &none  &none  &none  &none
                                    &kp LS(LPAR)     &kp LS(RPAR)   &kp UNDERSCORE    &none  &none  &none
            >;
        };

        mouse {
            bindings = <
&none  &none  &none  &none  &none  &none    &none             &none             &none           &none              &none  &none
&none  &none  &none  &none  &none  &none    &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_UP    &mmv MOVE_RIGHT    &none  &none
&none  &none  &none  &none  &none  &none    &mwh SCROLL_LEFT  &mwh SCROLL_DOWN  &mwh SCROLL_UP  &mwh SCROLL_RIGHT  &none  &none
                     &none  &none  &none    &mkp RCLK         &mkp LCLK         &mkp MCLK
            >;
        };

        media {
            bindings = <
&none  &none  &none  &none  &none  &none    &bt BT_CLR_ALL  &none         &none         &none         &none         &none
&none  &none  &none  &none  &none  &none    &bt BT_CLR      &bt BT_NXT    &bt BT_PRV    &none         &none         &none
&none  &none  &none  &none  &none  &none    &none           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                     &none  &none  &none    &none           &none         &none
            >;
        };

        fun {
            bindings = <
&none  &kp F12  &kp F7  &kp F8  &kp F9  &none    &none  &none  &none  &none  &none  &none
&none  &kp F11  &kp F4  &kp F5  &kp F6  &none    &none  &none  &none  &none  &none  &none
&none  &kp F10  &kp F1  &kp F2  &kp F3  &none    &none  &none  &none  &none  &none  &none
                        &none   &none   &none    &none  &none  &none
            >;
        };

        i3 {
            bindings = <
&none  &kp LG(TAB)  &kp LG(N7)        &kp LG(N8)        &kp LG(N9)        &none          &none  &none  &none  &none  &none  &none
&none  &none        &kp LG(NUMBER_4)  &kp LG(N5)        &kp LG(NUMBER_6)  &none          &none  &none  &none  &none  &none  &none
&none  &none        &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &none          &none  &none  &none  &none  &none  &none
                                      &none             &kp LG(N0)        &kp LG(TAB)    &none  &none  &none
            >;
        };

        dummy {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
